<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.furnature.mapper.ProductMapper">

	<!--상품 리스트-->	
	<select id="productList" parameterType="hashmap" resultType="com.example.furnature.model.Product">
		SELECT *
	    FROM TBL_PRODUCT P
	    INNER JOIN TBL_PRODUCT_CATE PC ON P.PRODUCT_CATE1 = PC.CATE_NO
	    INNER JOIN TBL_PRODUCT_IMG PI ON P.PRODUCT_NO = PI.PRODUCT_NO
	    WHERE 1=1
	    <if test="keyword != null and keyword !=''">
	        AND P.PRODUCT_NAME LIKE '%' ||  #{keyword} || '%'
	    </if>
	    <if test="width != null and width != ''">
	        AND P.PRODUCT_WIDTH BETWEEN #{width}-100 AND #{width}+100
	    </if>
	    <if test="depth != null and depth != ''">
	        AND P.PRODUCT_LENGTH BETWEEN #{depth}-100 AND #{depth}+100
	    </if>
	    <if test="height != null and height != ''">
	        AND P.PRODUCT_HEIGHT BETWEEN #{height}-100 AND #{height}+100
	    </if>
	    <if test="cateNum != null and cateNum != ''">
	        AND (P.PRODUCT_CATE1 = #{cateNum} OR P.PRODUCT_CATE2 = #{cateNum})
	    </if>
	    ORDER BY P.PRODUCT_NO
	    OFFSET #{startIndex} ROWS FETCH FIRST #{outputNumber} ROWS ONLY
	</select>
	
	<!--상품 카운트-->
	<select id="productCnt" parameterType="hashmap" resultType="int">
		SELECT COUNT(*) AS CNT 
		FROM TBL_PRODUCT P
		INNER JOIN TBL_PRODUCT_CATE PC ON P.PRODUCT_CATE1 = PC.CATE_NO
		INNER JOIN TBL_PRODUCT_IMG PI ON P.PRODUCT_NO = PI.PRODUCT_NO
		WHERE 1=1
		 <if test="keyword != null and keyword !=''">
	        AND P.PRODUCT_NAME LIKE '%' ||  #{keyword} || '%'
	     </if>
		 <if test="width != null and width != ''">
	        AND P.PRODUCT_WIDTH BETWEEN #{width}-100 AND #{width}+100
	    </if>
	    <if test="depth != null and depth != ''">
	        AND P.PRODUCT_LENGTH BETWEEN #{depth}-100 AND #{depth}+100
	    </if>
	    <if test="height != null and height != ''">
	        AND P.PRODUCT_HEIGHT BETWEEN #{height}-100 AND #{height}+100
	    </if>
	     <if test="cateNum != null and cateNum != ''">
	        AND (P.PRODUCT_CATE1 = #{cateNum} OR P.PRODUCT_CATE2 = #{cateNum})
	    </if>
	</select>	
	<!-- 상품 이미지 url 모든 리스트 -->
	<select id="selectProductImg" parameterType="hashmap" resultType="com.example.furnature.model.Product">
		SELECT * FROM
		TBL_PRODUCT_IMG
	</select>
	
	<!-- 상품 페이지에서 클릭시 상세페이지에서 상품번호에 맞는 이미지 불러오기 -->
	<select id="selectProductDetail" parameterType="hashmap" resultType="com.example.furnature.model.Product">
		SELECT * FROM 
		TBL_PRODUCT P INNER JOIN TBL_PRODUCT_IMG I 
		ON P.PRODUCT_NO = I.PRODUCT_NO 
		WHERE P.PRODUCT_NO = #{productNo}
	</select>

	
	<!--카테고리 리스트-->
	<select id="cateList" parameterType="hashmap" resultType="com.example.furnature.model.Product">
		SELECT *
		FROM TBL_PRODUCT_CATE
	</select>
	
	<!-- 상품 결제 데이터 인서트 -->
	<insert id="productOrder" parameterType="hashmap">
        INSERT INTO TBL_PRODUCT_ORDER (PAY_NO, ORDER_NO, PRODUCT_NO, USER_ID, ORDER_PRICE, ORDER_SIZE, ORDER_COUNT, PRODUCT_PRICE, ORDER_CATE, DELIVERY_CATE)
        VALUES (PAY_NO_SEQ.NEXTVAL, #{orderNo}, #{productNo}, #{userId}, #{orderPrice}, #{orderSize}, #{orderCount}, #{sizePrice}, '상품', 1)
	</insert>
	<!--리뷰 리스트-->
	<select id="productReview" parameterType="hashmap" resultType="com.example.furnature.model.Product">
		SELECT * FROM 
		TBL_PRODUCT_REVIEW WHERE PRODUCT_NO = #{productNo}
	</select>
	
	<!--리뷰 작성-->
	<insert id="reviewInsert" parameterType="hashmap" useGeneratedKeys="true" keyProperty="reviewNo" keyColumn="REVIEW_NO">
		INSERT INTO TBL_PRODUCT_REVIEW (REVIEW_NO, REVIEW_TITLE, REVIEW_CONTENTS, USER_ID, PRODUCT_NO, REVIEW_CDATETIME, REVIEW_UDATETIME,REVIEW_RATING)
		VALUES (TBL_PRODUCT_REVIEW_NO_SEQ.NEXTVAL, #{reviewTitle}, #{reviewContents}, #{userId}, #{productNo}, SYSDATE, SYSDATE, #{reviewRating})
	</insert>
	
	<!--리뷰 이미지 추가-->
	<update id="insertReviewImg" parameterType="hashmap">
		UPDATE TBL_PRODUCT_REVIEW
		SET REVIEW_IMG_PATH = #{filePath}, REVIEW_IMG_NAME = #{fileName}
		WHERE REVIEW_NO = #{reviewNo}
	</update>
	<!--상품 구매시 마일리지 적립-->
	<insert id="saveMileage" parameterType="hashmap">
		INSERT INTO TBL_MILEAGE
		VALUES(MILEAGE_SEQ.NEXTVAL, #{userId}, '상품구매', #{mileage}, '적립', SYSDATE)
	</insert>
	
	<!--
		유저별 총 마일리지 계산 쿼리 적립일땐 + / 사용일땐 -
		SELECT U.USER_ID, SUM(CASE 
                  WHEN M.MILEAGE_STATUS = '적립' THEN M.MILEAGE_PRICE
                  WHEN M.MILEAGE_STATUS = '사용' THEN -M.MILEAGE_PRICE
                  ELSE 0
                  END) AS TOTAL_MILEAGE
		FROM TBL_USER U INNER JOIN TBL_MILEAGE M ON U.USER_ID = M.USER_ID
		GROUP BY U.USER_ID;

	-->
	<!-- 리뷰 수정시 해당 리뷰 불러오기-->
	<select id="reviewInfo" parameterType="hashmap" resultType="com.example.furnature.model.Product">
		SELECT * FROM 
		TBL_PRODUCT_REVIEW WHERE REVIEW_NO = #{reviewNo}
	</select>
	<!-- 리뷰 삭제-->
	<delete id="deleteReview" parameterType="hashmap">
		DELETE FROM TBL_PRODUCT_REVIEW 
		WHERE REVIEW_NO = #{reviewNo}
	</delete>
	<!-- 리뷰 수정-->
	<update id="updateReview" parameterType="hashmap">
	    UPDATE TBL_PRODUCT_REVIEW 
	    SET REVIEW_TITLE = #{reviewTitle}, REVIEW_CONTENTS = #{reviewContents}, 
	    REVIEW_RATING = #{reviewRating}, REVIEW_UDATETIME = SYSDATE 
	    WHERE REVIEW_NO = #{reviewNo}
	</update>
</mapper>
