<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.furnature.mapper.MyPageMapper">
	<select id="selectUser" parameterType="hashmap" resultType="com.example.furnature.model.MyPage">
		SELECT U.USER_ID, U.USER_ZIP_CODE, U.USER_ADDR, U.USER_PHONE, U.USER_EMAIL, U.USER_NAME, TO_CHAR(U.USER_BIRTH, 'YYYY-MM-DD') USER_BIRTH, U.USER_AUTH, U.EVENT_ROUL, U.EVENT_CHECK<if test="sessionId != 'admin'">, NVL(M.MILEAGE_TOTAL, 0) MILEAGE_TOTAL</if>
		FROM TBL_USER U
		<if test="sessionId != 'admin'">
		LEFT JOIN (
		    SELECT USER_ID,
			    SUM(CASE WHEN MILEAGE_STATUS = '적립' THEN MILEAGE_PRICE
			        WHEN MILEAGE_STATUS = '사용' THEN -MILEAGE_PRICE END) MILEAGE_TOTAL
			FROM TBL_MILEAGE
			GROUP BY USER_ID
		) M ON U.USER_ID = M.USER_ID
		</if>
		WHERE U.USER_ID = #{sessionId}
	</select>
	
	<update id="updateUser" parameterType="hashmap">
		UPDATE TBL_USER
		<set>
			<if test="zipCode != null and zipCode != ''">USER_ZIP_CODE = #{zipCode},</if>
			<if test="addr != null and addr != ''">USER_ADDR = #{addr},</if>
			<if test="phone != null and phone != ''">USER_PHONE = #{phone},</if>
			<if test="email != null and email != ''">USER_EMAIL = #{email},</if>
		</set>
		WHERE USER_ID = #{sessionId}
	</update>

	<!--원데이클래스 신청내역 조회(회원)-->
	<select id="onedayInfo" parameterType="hashmap" resultType="com.example.furnature.model.MyPage">
		SELECT C.PRICE, P.NAME, PAY_ID, USER_ID, C.CLASS_NO, JOIN_DAY, PAY_DAY, C.CLASS_NAME, CLASS_DATE
		FROM TBL_PARTICIPANT P
		INNER JOIN TBL_CLASS C
		ON P.CLASS_NO = C.CLASS_NO
		WHERE P.USER_ID = #{userId}
	</select>	
	
	<!--원데이클래스 수강취소(회원)-->
	<delete id="onedayCancel" parameterType="hashmap">
		DELETE FROM TBL_PARTICIPANT
		WHERE CLASS_NO = #{classNo} AND USER_ID = #{sessionId}
	</delete>

	
	<select id="selectBiddingList" parameterType="hashmap" resultType="com.example.furnature.model.MyPage">
		SELECT MY_BIDDING, B.AUCTION_NO, B.AUCTION_BIDDING_DATE, AUCTION_TITLE, A.AUCTION_PRICE_CURRENT, A.AUCTION_STATUS
		FROM TBL_AUCTION_BIDDING B
		INNER JOIN (
		            SELECT MAX(AUCTION_BIDDING_PRICE) as MY_BIDDING, AUCTION_NO, USER_ID
		            FROM TBL_AUCTION_BIDDING
		            GROUP BY AUCTION_NO, USER_ID
		) M ON B.AUCTION_BIDDING_PRICE = M.MY_BIDDING
		INNER JOIN TBL_AUCTION A ON B.AUCTION_NO = A.AUCTION_NO
		WHERE B.USER_ID = #{sessionId}
	</select>
	
	<delete id="deleteBidding" parameterType="hashmap">
		DELETE FROM TBL_AUCTION_BIDDING
		WHERE AUCTION_NO = #{auctionNo} AND USER_ID = #{sessionId}
	</delete>
	
	<select id="selectMaxPrice" parameterType="hashmap" resultType="com.example.furnature.model.MyPage">
		SELECT MAX(AUCTION_BIDDING_PRICE) AUCTION_BIDDING_PRICE
		FROM TBL_AUCTION_BIDDING
		WHERE AUCTION_NO = #{auctionNo}
	</select>
	
	<update id="updateAuctionPrice" parameterType="hashmap">
		UPDATE TBL_AUCTION
		SET AUCTION_PRICE_CURRENT = #{biddingPrice}
		WHERE AUCTION_NO = #{auctionNo}
	</update>
	
	<select id="selectPrice" parameterType="hashmap" resultType="com.example.furnature.model.MyPage">
		SELECT *
		FROM TBL_AUCTION
		WHERE AUCTION_NO = #{auctionNo}
	</select>
	
	<select id="selectDelivery" parameterType="hashmap" resultType="com.example.furnature.model.MyPage">
		SELECT 
			ORDER_NO,
			USER_ID,
		    SUM(ORDER_COUNT) AS ORDER_COUNT,
		    ORDER_CATE,
		    CATE_NAME,
		    I.PRODUCT_THUMBNAIL,
		    P2.PRODUCT_NAME,
		    P.PRODUCT_NO
		FROM 
		    TBL_PRODUCT_ORDER P
		    INNER JOIN TBL_DELIVERY_CATE C ON P.DELIVERY_CATE = C.CATE_NO
	        INNER JOIN TBL_PRODUCT_IMG I ON I.PRODUCT_NO = P.PRODUCT_NO
	        INNER JOIN TBL_PRODUCT P2 ON P2.PRODUCT_NO = P.PRODUCT_NO
	        WHERE USER_ID = #{userId}
		GROUP BY 
		    ORDER_NO, 
		    USER_ID,
		    ORDER_CATE,
	        ORDER_COUNT,
	        PRODUCT_THUMBNAIL,
	        PRODUCT_NAME,
	        P.PRODUCT_NO,
		    CATE_NAME
		    
	</select>
	
	<select id="selectMileageList" parameterType="hashmap" resultType="com.example.furnature.model.MyPage">
		SELECT M.MILEAGE_NAME, M.MILEAGE_PRICE, M.MILEAGE_STATUS, TO_CHAR(CDATETIME, 'YYYY-MM-DD') CDATETIME, NVL(MILEAGE_TOTAL, 0) MILEAGE_TOTAL, CDATETIME FULL_CDATETIME
		FROM TBL_MILEAGE M
		LEFT JOIN (
		    SELECT USER_ID,
		        SUM(CASE WHEN MILEAGE_STATUS = '적립' THEN MILEAGE_PRICE
		            WHEN MILEAGE_STATUS = '사용' THEN -MILEAGE_PRICE END) MILEAGE_TOTAL
		    FROM TBL_MILEAGE
		    GROUP BY USER_ID
		) M2 ON M.USER_ID = M2.USER_ID
		WHERE M.USER_ID = #{sessionId}
		ORDER BY MILEAGE_NO DESC
	</select>
</mapper>
